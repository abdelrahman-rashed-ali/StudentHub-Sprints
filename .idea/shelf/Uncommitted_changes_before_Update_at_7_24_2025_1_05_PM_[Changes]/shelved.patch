Index: src/main/kotlin/ui/MainScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.sprints.ui\r\n\r\nimport org.sprints.data.repository.StudentsRepository\r\nimport org.sprints.data.repository.UsersRepository\r\nimport org.sprints.domain.models.Student\r\nimport org.sprints.domain.usecases.FilterStudentsUseCase\r\nimport org.sprints.domain.usecases.GetAllStudentsUseCase\r\nimport org.sprints.domain.usecases.LoginUseCase\r\nimport org.sprints.domain.usecases.SignupUseCase\r\n\r\nimport org.sprints.domain.usecases.UpdateStudentInfoUseCase\r\nimport kotlin.math.max\r\nimport kotlin.math.min\r\n\r\nclass MainScreen {\r\n    private var trials = 0\r\n    private val getAllStudentsUseCase = GetAllStudentsUseCase(StudentsRepository())\r\n    private val filterStudentsUseCase = FilterStudentsUseCase(StudentsRepository())\r\n    private val loginCase = LoginUseCase(UsersRepository())\r\n    private val updateStudentInfoUseCase = UpdateStudentInfoUseCase(StudentsRepository())\r\n    private val addNewStudentUseCase = AddNewStudentUseCase(StudentsRepository())\r\n\r\n    private val signupCase = SignupUseCase(UsersRepository())\r\n    fun home() {\r\n        println(\"Welcome to Students Management System\")\r\n        var signed = false\r\n        while(trials < 3){\r\n            if (!signed && !login()){\r\n                trials++\r\n                println(\"Wrong username or password \\n\" +\r\n                        \"You have ${3 - trials} of your attempts!\")\r\n                println(\"1- Try again!    2- Sign Up\")\r\n                val choice = readlnOrNull()\r\n                if(choice == \"1\"){\r\n                    continue\r\n                }else if(choice == \"2\"){\r\n                    if(!signup()){\r\n                        println(\"Sign Up failed\")\r\n                        println(\"Username and password must be unique\")\r\n                    }else{\r\n                        signed = true\r\n                    }\r\n                }\r\n                else{\r\n                    println(\"Invalid choice\")\r\n                }\r\n            }else{\r\n                while (true){\r\n                    println(\r\n                        \"\"\"\r\n                    please select what are you want to do : \r\n                    0 - Add New Student\r\n                    1 - Remove New Student\r\n                    2 - Search Students\r\n                    3 - Update Student Info\r\n                    4 - Show all Students\r\n                    5 - Logout\r\n                    \"\"\".trimIndent()\r\n                    )\r\n                    val input = readlnOrNull()?.toIntOrNull()\r\n                    val option = input?.let { Options.entries.getOrNull(it) }\r\n\r\n                    when (option) {\r\n                        Options.ADD_STUDENT -> addNewStudent()\r\n                        Options.UPDATE_STUDENT -> updateStudents()\r\n                        Options.REMOVE_STUDENT -> removeStudents()\r\n                        Options.FILTER_STUDENT -> filterStudents()\r\n                        Options.GET_STUDENTS -> getStudents()\r\n                        Options.EXIT -> {\r\n                            println(\"logout...\")\r\n                            break\r\n                        }\r\n\r\n                        else -> println(\"Invalid option. Try again.\")\r\n\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private fun signup() : Boolean{\r\n        println(\"please enter your username\")\r\n        val username = readlnOrNull()\r\n        println(\"Enter your password\")\r\n        val password = readlnOrNull()\r\n        if (username == null || password == null) return false\r\n        if(signupCase.signup(username, password)){\r\n            println(\"Signed up successfully\")\r\n            return true\r\n        }else{\r\n            return false\r\n        }\r\n    }\r\n\r\n    private fun login(): Boolean {\r\n        println(\"please enter your username\")\r\n        val username = readlnOrNull()\r\n        println(\"Enter your password\")\r\n        val password = readlnOrNull()\r\n        if (username == null || password == null) return false\r\n        // handle use case here\r\n\r\n        if (loginCase.login(username, password)) {\r\n            println(\"Logged in as $username\")\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n\r\n    private fun addNewStudent(): Boolean {\r\n        println(\"Enter student Name \")\r\n        val name = readlnOrNull()\r\n        if (name.isNullOrBlank()) {\r\n            println(\"Name is required.\")\r\n            return false\r\n        }\r\n        println(\"Enter student grade\")\r\n        val grade = readlnOrNull()\r\n        if (grade.isNullOrBlank()) {\r\n            println(\"Grade is required.\")\r\n            return false\r\n        }\r\n        println(\"Enter student GPA \")\r\n        val gpaInput = readlnOrNull()\r\n        val gpa = gpaInput?.toDoubleOrNull()\r\n        if (gpaInput.isNullOrBlank()) {\r\n            println(\"GPA is required.\")\r\n            return false\r\n        }\r\n        if (gpa == null) {\r\n            println(\"Invalid GPA. Please enter a valid number.\")\r\n            return false\r\n        }\r\n        println(\"Enter student Note\")\r\n        val note = readlnOrNull()\r\n        println(\"Enter student status \")\r\n        val status = readlnOrNull()\r\n        if (status.isNullOrBlank()) {\r\n            println(\"Status is required.\")\r\n            return false\r\n        }\r\n        val students = getAllStudentsUseCase.getAllStudents()\r\n        val newId = (students.maxOfOrNull { it.id } ?: 0) + 1\r\n        val student = Student(\r\n            id = newId,\r\n            name = name,\r\n            grade = grade,\r\n            status = status,\r\n            gpa = gpa,\r\n            notes = note\r\n        )\r\n        val result = addNewStudentUseCase.isStudentAdded(student)\r\n        if (result) {\r\n            println(\"Student added successfully!\")\r\n            getStudents()\r\n        } else {\r\n            println(\"Failed to add student.\")\r\n        }\r\n        return result\r\n    }\r\n\r\n\r\n    private fun removeStudents(): Boolean {\r\n        // show all students\r\n        print(\"Enter student ID ▶ \")\r\n        val id = readlnOrNull()?.toIntOrNull()\r\n\r\n        return false\r\n    }\r\n\r\n    private fun filterStudents(): List<Student> {\r\n        println(\r\n            \"\"\"\r\n        Please select a filtering criteria ▶\r\n        0 ▶ Filter by name\r\n        1 ▶ Filter by grade\r\n        2 ▶ Filter by status\r\n        3 ▶ Filter by GPA: e.g. (3 ≤..≤ 4)\r\n        4 ▶ Back ↺\r\n        \"\"\".trimIndent()\r\n        )\r\n        val filterOp = readlnOrNull()?.toIntOrNull()\r\n        if (filterOp == null) {\r\n            println(\"Invalid input. Returning to home...\")\r\n            return emptyList()\r\n        }\r\n\r\n        val filteredStudents = when (filterOp) {\r\n            0 -> {\r\n                print(\"Enter student's name ▶ \")\r\n                val name = readlnOrNull()\r\n                filterStudentsUseCase.filterByName(name)\r\n            }\r\n\r\n            1 -> {\r\n                println(\"Enter student's grade ▶ \")\r\n                val grade = readlnOrNull()\r\n                filterStudentsUseCase.filterByGrade(grade)\r\n            }\r\n\r\n            2 -> {\r\n                println(\"Enter student's status ▶ \")\r\n                val status = readlnOrNull()\r\n                filterStudentsUseCase.filterByStatus(status)\r\n            }\r\n\r\n            3 -> {\r\n                println(\"Enter minimum GPA: \")\r\n                val minGPA = readlnOrNull()?.toDoubleOrNull()\r\n                if (minGPA == null) {\r\n                    println(\"Invalid minimum GPA. Returning to home...\")\r\n                    return emptyList()\r\n                }\r\n                println(\"Enter maximum GPA: \")\r\n                val maxGPA = readlnOrNull()?.toDoubleOrNull()\r\n                if (maxGPA == null) {\r\n                    println(\"Invalid maximum GPA. Returning to home...\")\r\n                    return emptyList()\r\n                }\r\n                filterStudentsUseCase.filterByGPA(min(maxGPA, minGPA), max(maxGPA, minGPA))\r\n            }\r\n\r\n            4 -> {\r\n                println(\"Returning to home ↺\")\r\n                return emptyList()\r\n            }\r\n\r\n            else -> {\r\n                println(\"Invalid choice :(\")\r\n                return emptyList()\r\n            }\r\n        }\r\n\r\n        if (filteredStudents.isEmpty()) {\r\n            println(\"No students found matching the criteria.\")\r\n        } else {\r\n            val idWidth = 5\r\n            val nameWidth = 20\r\n            val gradeWidth = 16\r\n            val gpaWidth = 12\r\n            val statusWidth = 14\r\n            val notesWidth = 30\r\n            println(\r\n                String.format(\r\n                    \"%-${idWidth}s %-${nameWidth}s %-${gradeWidth}s %-${gpaWidth}s %-${statusWidth}s %-${notesWidth}s\",\r\n                    \"ID\", \"Name\", \"Grade\", \"GPA\", \"Status\", \"Notes\"\r\n                )\r\n            )\r\n            println(\"-\".repeat(idWidth + nameWidth + gradeWidth + gpaWidth + statusWidth + notesWidth + 5))\r\n\r\n            filteredStudents.forEach {\r\n                println(\r\n                    String.format(\r\n                        \"%-${idWidth}d %-${nameWidth}s %-${gradeWidth}s %-${gpaWidth}.2f %-${statusWidth}s %-${notesWidth}s\",\r\n                        it.id, it.name, it.grade, it.gpa ?: 0.0, it.status, it.notes ?: \"\"\r\n                    )\r\n                )\r\n            }\r\n        }\r\n\r\n        return filteredStudents\r\n    }\r\n\r\n    private fun getStudents() {\r\n        val idWidth = 5\r\n        val nameWidth = 20\r\n        val gradeWidth = 16\r\n        val gpaWidth = 12\r\n        val statusWidth = 14\r\n        val notesWidth = 30\r\n        println(\r\n            String.format(\r\n                \"%-${idWidth}s %-${nameWidth}s %-${gradeWidth}s %-${gpaWidth}s %-${statusWidth}s %-${notesWidth}s\",\r\n                \"ID\", \"Name\", \"Grade\", \"GPA\", \"Status\", \"Notes\"\r\n            )\r\n        )\r\n        println(\"-\".repeat(idWidth + nameWidth + gradeWidth + gpaWidth + statusWidth + notesWidth + 5))\r\n\r\n        getAllStudentsUseCase.getAllStudents().forEach {\r\n            println(\r\n                String.format(\r\n                    \"%-${idWidth}d %-${nameWidth}s %-${gradeWidth}s %-${gpaWidth}.2f %-${statusWidth}s %-${notesWidth}s\",\r\n                    it.id, it.name, it.grade, it.gpa, it.status, it.notes ?: \"\"\r\n                )\r\n            )\r\n        }\r\n    }\r\n\r\n    private fun updateStudents() {\r\n        getStudents()\r\n        println(\"Enter student ID ▶ \")\r\n        val id = readlnOrNull()?.toIntOrNull()\r\n\r\n        if (id == null) {\r\n            println(\"Invalid ID\")\r\n            return\r\n        }\r\n\r\n        // Find the student to show their current info\r\n        val studentToUpdate = StudentsRepository().findStudentById(id)\r\n        if (studentToUpdate == null) {\r\n            println(\"❌ Student with ID $id not found.\")\r\n            return\r\n        }\r\n\r\n        println(\"Updating student: ${studentToUpdate.name}.\")\r\n\r\n        print(\"Enter new name [${studentToUpdate.name}] ▶ \")\r\n        val newName = readlnOrNull().takeIf { !it.isNullOrBlank() } ?: studentToUpdate.name\r\n\r\n        print(\"Enter new grade [${studentToUpdate.grade}] ▶ \")\r\n        val newGrade = readlnOrNull().takeIf { !it.isNullOrBlank() } ?: studentToUpdate.grade\r\n\r\n        print(\"Enter new status [${studentToUpdate.status}] ▶ \")\r\n        val newStatus = readlnOrNull().takeIf { !it.isNullOrBlank() } ?: studentToUpdate.status\r\n\r\n        print(\"Enter new GPA [${studentToUpdate.gpa ?: \"N/A\"}] ▶ \")\r\n        val newGpa = readlnOrNull()?.toDoubleOrNull() ?: studentToUpdate.gpa\r\n\r\n        print(\"Enter new notes [${studentToUpdate.notes ?: \"N/A\"}] ▶ \")\r\n        val newNotes = readlnOrNull().takeIf { !it.isNullOrBlank() } ?: studentToUpdate.notes\r\n\r\n        val result = updateStudentInfoUseCase(\r\n            id = id,\r\n            newName = newName,\r\n            newGrade = newGrade,\r\n            newStatus = newStatus,\r\n            newGpa = newGpa,\r\n            newNotes = newNotes\r\n        )\r\n\r\n        result.onSuccess { updateStudents ->\r\n            println(\"Student updated successfully!\")\r\n            println(updateStudents)\r\n        }.onFailure { error ->\r\n            println(\"Error updating student: ${error.message}\")\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/ui/MainScreen.kt b/src/main/kotlin/ui/MainScreen.kt
--- a/src/main/kotlin/ui/MainScreen.kt	(revision 8720043dcfe81ab7e2447668096469725657a0bc)
+++ b/src/main/kotlin/ui/MainScreen.kt	(date 1753351500322)
@@ -3,12 +3,8 @@
 import org.sprints.data.repository.StudentsRepository
 import org.sprints.data.repository.UsersRepository
 import org.sprints.domain.models.Student
-import org.sprints.domain.usecases.FilterStudentsUseCase
-import org.sprints.domain.usecases.GetAllStudentsUseCase
-import org.sprints.domain.usecases.LoginUseCase
-import org.sprints.domain.usecases.SignupUseCase
+import org.sprints.domain.usecases.*
 
-import org.sprints.domain.usecases.UpdateStudentInfoUseCase
 import kotlin.math.max
 import kotlin.math.min
 
Index: src/main/kotlin/domain/usecases/AddNewStudentUseCase.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.sprints.domain.usecases\r\n\r\nimport org.sprints.domain.repository.StudentsRepository\r\n\r\nclass AddNewStudentUseCase(val repository: StudentsRepository)  {\r\n\r\n    fun isStudentAdded(student: Student): Boolean {\r\n        return repository.addStudent(student)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/domain/usecases/AddNewStudentUseCase.kt b/src/main/kotlin/domain/usecases/AddNewStudentUseCase.kt
--- a/src/main/kotlin/domain/usecases/AddNewStudentUseCase.kt	(revision 8720043dcfe81ab7e2447668096469725657a0bc)
+++ b/src/main/kotlin/domain/usecases/AddNewStudentUseCase.kt	(date 1753351500321)
@@ -1,5 +1,6 @@
 package org.sprints.domain.usecases
 
+import org.sprints.domain.models.Student
 import org.sprints.domain.repository.StudentsRepository
 
 class AddNewStudentUseCase(val repository: StudentsRepository)  {
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"22\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n          </set>\r\n        </option>\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	(revision 8720043dcfe81ab7e2447668096469725657a0bc)
+++ b/.idea/gradle.xml	(date 1753351500320)
@@ -5,7 +5,7 @@
     <option name="linkedExternalProjectsSettings">
       <GradleProjectSettings>
         <option name="externalProjectPath" value="$PROJECT_DIR$" />
-        <option name="gradleJvm" value="22" />
+        <option name="gradleJvm" value="liberica-23" />
         <option name="modules">
           <set>
             <option value="$PROJECT_DIR$" />
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"FrameworkDetectionExcludesConfiguration\">\r\n    <file type=\"web\" url=\"file://$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_22\" project-jdk-name=\"openjdk-24\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 8720043dcfe81ab7e2447668096469725657a0bc)
+++ b/.idea/misc.xml	(date 1753351500321)
@@ -4,7 +4,7 @@
   <component name="FrameworkDetectionExcludesConfiguration">
     <file type="web" url="file://$PROJECT_DIR$" />
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_22" project-jdk-name="openjdk-24" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" project-jdk-name="openjdk-24" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
